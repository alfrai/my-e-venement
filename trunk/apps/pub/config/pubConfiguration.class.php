<?php
/**********************************************************************************
*
*	    This file is part of e-venement.
*
*    e-venement is free software; you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation; either version 2 of the License.
*
*    e-venement is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with e-venement; if not, write to the Free Software
*    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*
*    Copyright (c) 2006-2014 Baptiste SIMON <baptiste.simon AT e-glop.net>
*    Copyright (c) 2006-2014 Libre Informatique [http://www.libre-informatique.fr/]
*
***********************************************************************************/
?>
<?php

class pubConfiguration extends sfApplicationConfiguration
{
  public function configure()
  {
    $this->dispatcher->connect('pub.transaction_before_creation', array($this, 'triggerTransactionBeforeCreation'));
  }
  
  public function shut()
  {
    if ( !sfConfig::get('app_open',false) )
      die($this->getEnvironment() == 'dev' ? 'This application is not opened' : sfConfig::get('app_texts_when_closed',''));
  }
  
  public function triggerTransactionBeforeCreation(sfEvent $event)
  {
    $params = $event->getParameters();
    $transaction = $params['transaction'];
    $transaction->send_an_email = true;
  }
  
  public function hardenIntegrity($redirect = true)
  {
    if ( !sfContext::hasInstance() )
      throw new liOnlineSaleException('Checking the cart integrity is not possible.');
    $sf_action = sfContext::getInstance()->getActionStack()->getLastEntry()->getActionInstance();
    $sf_action->getContext()->getConfiguration()->loadHelpers('I18N');
    
    $gauges = Doctrine_Query::create()->from('Gauge g')
      ->select('g.*')
      ->leftJoin('g.Manifestation m')
      ->leftJoin('m.Event e')
      
      ->leftJoin('g.Tickets tck WITH printed_at IS NULL AND integrated_at IS NULL AND duplicating IS NULL AND cancelling IS NULL')
      ->andWhere('tck.transaction_id = ?', $sf_action->getUser()->getTransactionId())
      
      ->leftJoin('tck.Price p')
      ->leftJoin('p.Manifestations pm WITH pm.id = m.id')
      ->leftJoin('p.Users pu')
      
      ->execute()
    ;
    
    // to seat
    foreach ( $gauges as $gauge )
    {
      // SECURITY: not to sell forbidden products
      // the workspace + meta_event
      if ( !in_array($gauge->id, array_keys($sf_action->getUser()->getWorkspacesCredentials()))
        || !in_array($gauge->Manifestation->Event->meta_event_id, array_keys($sf_action->getUser()->getMetaEventsCredentials()))
      )
      foreach ( $gauge->Tickets as $tickets )
      if ( !$ticket->printed_at && !$ticket->integrated_at && !$ticket->duplicating && !$ticket->cancelling
        && $ticket->transaction_id == $sf_action->getUser()->getTransactionId() )
      {
        $ticket->delete();
        continue;
      }
      // the price
      foreach ( $gauge->Tickets as $ticket )
      if ( $ticket->price_id
        && !in_array($sf_action->getUser()->getId(), $ticket->Price->Users->getPrimaryKeys())
        && !$ticket->printed_at && !$ticket->integrated_at && !$ticket->duplicating && !$ticket->cancelling
        && $ticket->transaction_id == $sf_action->getUser()->getTransactionId() )
      )
        $ticket->delete();
      
      // what ticket needs to be seated
      $to_seat = array();
      foreach ( $gauge->Tickets as $ticket )
      if ( $ticket->seat_id )
        $to_seat[] = $ticket;
      
      // what can be done for that ?
      $seater = new Seater($gauge->id);
      $seats = $seater->findSeats(count($to_seat));
      foreach ( $seats as $seat )
      {
        $ticket = array_pop($tickets);
        $ticket->Seat = $seat;
        $ticket->save(); // do it
      }
    }
    
    // orphans
    try {
      $orphans = $this->getOrphans($sf_action->getUser()->getTransaction(), array());
      if ( count($orphans) > 0 )
      {
        if ( !$redirect )
          return false;
        
        $data = array_pop($orphans); // arbitrary choice, the last gauge, to start from somewhere solving the results
        $this->getContext()->getConfiguration()->loadHelpers('I18N');
         
        $sf_action->getUser()->setFlash('error', __('There are still some orphan seats generated by your selection, please choose other seats and follow eventual warnings on the plan after confirmation.'));
        $sf_action->redirect('manifestation/show?id='.$data['gauge']->manifestation_id);
      }
      
      return true;
    }
    catch ( liOnlineSaleException $e )
    {
      error_log('error', 'No orphan to find on this plateform: '.$e->getMessage());
      return true;
    }
  }
  
  public function getOrphans(Transaction $transaction, array $options)
  {
    foreach ( array('gauge_id', 'manifestation_id', 'seat_id', 'ticket_id') as $field )
    if ( !isset($options[$field]) )
      $options[$field] = false;
    
    $manif_details = true;
    
    // the query
    $q = Doctrine::getTable('Gauge')->createQuery('g', false)
      ->leftJoin('g.Workspace ws')
      ->leftJoin('ws.SeatedPlans sp')
      
      ->leftJoin('g.Manifestation m')
      ->leftJoin('m.Event e')
      ->leftJoin('e.Translation et')
      ->leftJoin('m.Location l')
      ->andWhere('l.id = sp.location_id')
      
      ->leftJoin('g.Tickets tck WITH tck.transaction_id = ?', $transaction->id)
      ->leftJoin('tck.Seat s')
    ;
    
    if ( $options['gauge_id'] )
    {
      $q->andWhere('g.id = ?', $options['gauge_id']);
      $manif_details = false;
    }
    else
      $q->andWhere('s.id IS NOT NULL');
    
    if ( $options['ticket_id'] )
      $q->andWhere('tck.id = ?', $options['ticket_id']);
    
    if ( $options['manifestation_id'] )
    {
      $q->andWhere('m.id = ?', $options['manifestation_id']);
      $manif_details = false;
    }
    
    if ( $options['seat_id'] )
    {
      $q->andWhere('tck.seat_id = ?', $options['seat_id']);
      $manif_details = false;
    }
    $gauges = $q->execute();
    
    if ( !$options )
      $q->andWhere('tck.transaction_id = ?', $transaction->id);
    
    //throw new sfException('glop');
    // no gauge ?!
    if ( $gauges->count() == 0 )
      throw new liOnlineSaleException('Sorry, finding back orphans with the given parameters is impossible...');
    
    $orphans = array();
    
    // gauges, one by one
    foreach ( $gauges as $gauge )
    {
      // preparing the field
      $seater = new Seater($gauge->id);
      $seats = new Doctrine_Collection('Seat');
      foreach ( $gauge->Tickets as $ticket )
        $seats[] = $ticket->Seat;
      
      // forging the json data
      foreach ( $seater->findOrphansWith($seats) as $orphan )
      {
        $orphans[$gauge->id][] = array(
          'seat_id'   => $orphan->id,
          'seat_name' => (string)$orphan,
          'gauge_id' => $gauge->id,
          'manifestation_id' => $gauge->manifestation_id,
          'seated_plan_id' => $orphan->seated_plan_id,
          'transaction_id' => $transaction->id,
          'gauge' => (string)$gauge,
          'manifestation' => (string)$gauge->Manifestation,
        );
      }
    }
    
    // now cleaning useless data
    foreach ( $orphans as $gid => $data )
    if ( !$orphans[$gid] )
      unset($orphans[$gid]);
    
    return $orphans;
  }
}
