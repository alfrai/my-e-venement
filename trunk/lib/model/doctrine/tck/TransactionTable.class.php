<?php

/**
 * TransactionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TransactionTable extends PluginTransactionTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TransactionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Transaction');
    }
  
  public function createQuery($alias = 't')
  {
    $tck = 'tck' != $alias ? 'tck' : 'tck2';
    $m   = 'm'   != $alias ? 'm'   : 'm2';
    
    $q = parent::createQuery($alias);
    $a = $q->getRootAlias();
    $q->leftJoin("$a.Tickets $tck")
      ->leftJoin("$tck.Duplicatas duplicatas")
      ->leftJoin("$tck.Cancelled cancelled")
      ->leftJoin("$tck.Manifestation $m");
    return $q;
  }
  
  public function fetchOneById($id)
  {
    $q = $this->createQuery()
      ->andWhere('id = ?',$id);
    return $q->fetchOne();
  }
  public function findOneById($id)
  {
    return $this->fetchOneById($id);
  }
  
  public static function addDebtsListBaseSelect(Doctrine_Query $q)
  {
    return $q
      ->select($fields = 't.id, t.closed, t.updated_at, c.id, c.name, c.firstname, p.id, p.name, pt.id, pt.name, o.id, o.name, o.city')
      ->groupBy($fields);
  }
  public static function getDebtsListTicketsCondition($ticket_table = 'tck', $date = NULL)
  {
    $r = $ticket_table.'.transaction_id = t.id AND ('.$ticket_table.'.printed = TRUE OR '.$ticket_table.'.integrated = TRUE OR '.$ticket_table.'.cancelling IS NOT NULL)';
    if ( !is_null($date) )
      $r .= ' AND '.$ticket_table.".updated_at < '$date'";
    return $r;
  }
  public function retrieveDebtsList()
  {
    $q = Doctrine_Query::create()->from('Transaction t');
    $this->addDebtsListBaseSelect($q);
    $q->addSelect('(SELECT sum(tck.value) FROM Ticket tck WHERE '.$this->getDebtsListTicketsCondition().') AS outcomes')
      ->addSelect('(SELECT sum(pp.value)   FROM Payment pp  WHERE pp.transaction_id   = t.id) AS incomes')
      ->leftJoin('t.Contact c')
      ->leftJoin('t.Professional p')
      ->leftJoin('p.ProfessionalType pt')
      ->leftJoin('p.Organism o')
      ->where('((SELECT sum(tck2.value) FROM Ticket tck2 WHERE '.$this->getDebtsListTicketsCondition('tck2').') - (SELECT sum(p2.value) FROM Payment p2 WHERE p2.transaction_id = t.id)) != 0');
    return $q;
  }
}
