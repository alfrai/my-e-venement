<?php

/**
 * PluginManifestation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginManifestation extends BaseManifestation implements liMetaEventSecurityAccessor
{
  protected static $credentials = array(
    'contact_id' => 'event-reservation-change-contact',
    'reservation_confirmed' => 'event-reservation-confirm',
  );
  
  public function duplicate($save = true)
  {
    $manif = $this->copy();
    foreach ( array('id', 'updated_at', 'created_at', 'sf_guard_user_id') as $property )
      $manif->$property = NULL;
    foreach ( array('Gauges', 'PriceManifestations', 'Organizers') as $subobjects )
    foreach ( $this->$subobjects as $subobject )
    {
      $collection = $manif->$subobjects;
      $collection[] = $subobject->copy();
    }
    
    if ( $save )
      $manif->save();
    
    return $manif;
  }
  
  public function preSave($event)
  {
    // converting duration from "1:00" to 3600 (seconds)
    if ( intval($this->duration).'' != ''.$this->duration )
    {
      $str = $this->duration;
      $this->duration = intval(strtotime($this->duration.'+0',0));
      
      // for durations > 24h
      if ( !$this->duration )
      {
        $arr = explode(':', $str);
        $this->duration = intval($arr[1])*60 + intval($arr[0])*3600;
      }
    }
    
    // completing or correcting reservation fields
    if ( !$this->reservation_begins_at
      || $this->reservation_begins_at && $this->reservation_begins_at > $this->happens_at )
      $this->reservation_begins_at = $this->happens_at;
    if ( !$this->reservation_ends_at
      || $this->reservation_ends_at && $this->reservation_ends_at < date('Y-m-d H:i:s',strtotime($this->happens_at)+$this->duration) )
      $this->reservation_ends_at = date('Y-m-d H:i:s',strtotime($this->happens_at)+$this->duration);
    if ( sfContext::hasInstance() )
    {
      $sf_user = sfContext::getInstance()->getUser();
      if ( !$sf_user->hasCredential($this->credentials['contact_id']) )
      {
        if ( $sf_user->getContact() )
          $this->Applicant = $sf_user->getContact();
        else
          throw new liBookingException('The current user %%name%% is not linked to any contact, and does not have the %%credential%% credential', array('%%name%%' => (string)$sf_user, '%%credential%%' => $this->credentials['contact_id']));
      }
    }
    
    parent::preSave($event);
  }
  public function postSave($event)
  {
    $notice1 = $notice2 = false;
    parent::postSave($event);
    
    if ( sfContext::hasInstance() )
    if ( $this->reservation_confirmed && !sfContext::getInstance()->getUser()->hasCredential(self::$credentials['reservation_confirmed']) )
    {
      $this->reservation_confirmed = false;
      $notice1 = __('You do not have the credential to confirm any manifestation.');
      $this->save();
    }
    
    // manifestation in conflict
    if ( $this->hasAnyConflict() )
    {
      // manifestation confirmed
      if ( $this->reservation_confirmed )
      {
        sfApplicationConfiguration::getActive()->loadHelpers(array('I18N'));
        
        // no credential to tolerate conflicts
        if ( sfContext::hasInstance() && !sfContext::getInstance()->getUser()->hasCredential(self::$credentials['reservation_confirmed']) )
        {
          $this->reservation_confirmed = false;
          $this->save();
          $notice2 = __('Its status "confirmed" has been disabled.');
        }
        else // special credentials for conflicts
          $notice2 = __('Its status "confirmed" has been kept, because you\'ve got specific credentials for that.');
      }
      else // not yet confirmed
        $notice2 = __('But it is not yet confirmed.');
      
      // global notice if any conflict is possible
      $notice2 = __('This manifestation conflicts with another.').' '.$notice2;
    }
    
    if ( $notice1 ) $notices[] = $notice1;
    if ( $notice2 ) $notices[] = $notice2;
    if ( sfContext::hasInstance() && $notices )
      sfContext::getInstance()->getUser()->setFlash('notice',implode(' | ', $notices));
  }
  
  public function postInsert($event)
  {
    $add_prices = false;
    if ( sfContext::hasInstance() )
    {
      $sf_user = sfContext::getInstance()->getUser();
      if ( $sf_user->hasCredential(array('tck-transaction', 'event-admin-price',), false) )
        $add_prices = true;
    }
    else $add_prices = true;
    
    if ( $this->PriceManifestations->count() == 0 && $add_prices )
    foreach ( Doctrine::getTable('Price')->createQuery('p')->andWhere('p.hide = FALSE')->execute() as $price )
    {
      $pm = PriceManifestation::createPrice($price);
      $pm->manifestation_id = $this->id;
      //$pm->save();
      $this->PriceManifestations[] = $pm;
    }
    $this->save();
    
    parent::postInsert($event);
  }
  
  public function getDurationHR()
  {
    if ( intval($this->duration).'' != ''.$this->duration )
      return $this->duration;
    
    $hours = floor($this->duration/3600);
    $minutes = floor($this->duration%3600/60) > 9 ? floor($this->duration%3600/60) : '0'.floor($this->duration%3600/60);
    return $hours.':'.$minutes;
  }
  
  public function getMEid()
  {
    return $this->Event->getMEid();
  }
  
  public static function getCredentials()
  {
    return self::$credentials;
  }

  public function getIndexesPrefix()
  {
    return strtolower(get_class($this));
  }
}
