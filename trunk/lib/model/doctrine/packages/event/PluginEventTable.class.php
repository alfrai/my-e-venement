<?php

/**
 * PluginEventTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginEventTable extends Doctrine_Table implements CompositeSearchableTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginEventTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginEvent');
    }
    public function __constructor(string $name, Doctrine_Connection $conn, boolean $initDefinition)
    {
      parent::__constructor($name,$conn,$initDefinition);
      $this->getTemplate('Doctrine_Template_Searchable')->getPlugin()
        ->setOption('analyzer', new MySearchAnalyzer());
    }
    
    public function createQuery($alias = 'e')
    {
      $q = parent::createQuery($alias);
      
      if (!( sfContext::hasInstance()
        && sfContext::getInstance()->getActionName()
        && in_array(sfContext::getInstance()->getActionName(), array('edit', 'update'))
      ))
      {
        $culture = sfContext::hasInstance() ? sfContext::getInstance()->getUser()->getCulture() : 'fr';
        $q->leftJoin("$alias.Translation translation WITH translation.lang = '$culture'");
      }
      else
        $q->leftJoin("$alias.Translation translation");
      
      return $q;
    }
    
  public function batchUpdateIndex($limit = null, $offset = null, $encoding = null)
  {
    if ( !$this->hasTemplate('Searchable') )
      return false;
    return $this->getTemplate('Searchable')->getListener()->get('Searchable')->batchUpdateIndex($limit, $offs$
  }
}
