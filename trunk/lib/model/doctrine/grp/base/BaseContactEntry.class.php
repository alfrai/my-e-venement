<?php

/**
 * BaseContactEntry
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $professional_id
 * @property string $comment1
 * @property string $comment2
 * @property boolean $confirmed
 * @property integer $entry_id
 * @property integer $transaction_id
 * @property Professional $Professional
 * @property Entry $Entry
 * @property Transaction $Transaction
 * @property Doctrine_Collection $Entries
 * 
 * @method integer             getProfessionalId()  Returns the current record's "professional_id" value
 * @method string              getComment1()        Returns the current record's "comment1" value
 * @method string              getComment2()        Returns the current record's "comment2" value
 * @method boolean             getConfirmed()       Returns the current record's "confirmed" value
 * @method integer             getEntryId()         Returns the current record's "entry_id" value
 * @method integer             getTransactionId()   Returns the current record's "transaction_id" value
 * @method Professional        getProfessional()    Returns the current record's "Professional" value
 * @method Entry               getEntry()           Returns the current record's "Entry" value
 * @method Transaction         getTransaction()     Returns the current record's "Transaction" value
 * @method Doctrine_Collection getEntries()         Returns the current record's "Entries" collection
 * @method ContactEntry        setProfessionalId()  Sets the current record's "professional_id" value
 * @method ContactEntry        setComment1()        Sets the current record's "comment1" value
 * @method ContactEntry        setComment2()        Sets the current record's "comment2" value
 * @method ContactEntry        setConfirmed()       Sets the current record's "confirmed" value
 * @method ContactEntry        setEntryId()         Sets the current record's "entry_id" value
 * @method ContactEntry        setTransactionId()   Sets the current record's "transaction_id" value
 * @method ContactEntry        setProfessional()    Sets the current record's "Professional" value
 * @method ContactEntry        setEntry()           Sets the current record's "Entry" value
 * @method ContactEntry        setTransaction()     Sets the current record's "Transaction" value
 * @method ContactEntry        setEntries()         Sets the current record's "Entries" collection
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContactEntry extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('contact_entry');
        $this->hasColumn('professional_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('comment1', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('comment2', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('confirmed', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('entry_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('transaction_id', 'integer', null, array(
             'type' => 'integer',
             ));


        $this->index('contact_entry_index', array(
             'fields' => 
             array(
              0 => 'professional_id',
              1 => 'entry_id',
             ),
             'unique' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Professional', array(
             'local' => 'professional_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Entry', array(
             'local' => 'entry_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Transaction', array(
             'local' => 'transaction_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('EntryElement as Entries', array(
             'local' => 'id',
             'foreign' => 'contact_entry_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}