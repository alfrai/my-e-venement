<?php

/**
 * Manifestation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Manifestation extends PluginManifestation
{
  public function getName()
  {
    sfApplicationConfiguration::getActive()->loadHelpers(array('I18N','Date'));
    return $this->Event->name.' '.__('at').' '.format_datetime($this->happens_at,'EEE d MMM yyyy HH:mm');
  }
  public function getNameWithFullDate()
  {
    sfApplicationConfiguration::getActive()->loadHelpers(array('I18N'));
    return $this->Event->name.' '.__('at').' '.$this->getFormattedDate();
  }
  public function getFormattedDate()
  {
    sfApplicationConfiguration::getActive()->loadHelpers(array('Date'));
    return format_datetime($this->happens_at,'EEEE d MMMM yyyy HH:mm');
  }
  public function getShortName()
  {
    sfApplicationConfiguration::getActive()->loadHelpers(array('I18N','Date'));
    return $this->Event->name.' '.__('at').' '.format_date($this->happens_at);
  }
  public function __toString()
  {
    return $this->getName();
  }
  
  public function getInfosTickets()
  {
    $tickets = Doctrine::getTable('Ticket')->createQuery('tck')
      ->andWhere('manifestation_id = ?',$this->id)
      ->andWhere('tck.duplicate IS NULL')
      ->andWhere('(tck.printed = true OR tck.integrated = true)')
      ->fetchArray();
    
    $r = array('value' => 0, 'qty' => 0);
    foreach ( $tickets as $ticket )
    {
      $r['value'] += $ticket['value'];
      $r['qty']   += is_null($ticket['cancelling']) ? 1 : -1;
    }
    
    return $r;
  }
  
  public function postInsert($event)
  {
    if ( $this->PriceManifestations->count() == 0 )
    foreach ( Doctrine::getTable('Price')->createQuery()->execute() as $price )
    {
      $pm = PriceManifestation::createPrice($price);
      $pm->manifestation_id = $this->id;
      //$pm->save();
      $this->PriceManifestations[] = $pm;
    }
    $this->save();
    
    parent::postInsert($event);
  }
}
