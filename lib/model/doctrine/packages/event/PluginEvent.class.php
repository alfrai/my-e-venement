<?php

/**
 * PluginEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginEvent extends BaseEvent implements liMetaEventSecurityAccessor, liDuplicable
{
  public function preSave($event)
  {
    // converting duration from "1:00" to 3600 (seconds)
    if ( intval($this->duration).'' != ''.$this->duration )
    {
      $str = $this->duration;
      $this->duration = intval(strtotime($this->duration.'+0',0));
      
      // for durations > 24h
      if ( !$this->duration )
      {
        $arr = explode(':', $str);
        $this->duration = intval($arr[1])*60 + intval($arr[0])*3600;
      }
    }
    // converting close_before from "1:00" to 3600 (seconds)
    if ( intval($this->close_before).'' != ''.$this->close_before )
    {
      $str = $this->close_before;
      $this->close_before = intval(strtotime($this->duration.'+0',0));
      
      // for close_before > 24h
      if ( !$this->close_before )
      {
        $arr = explode(':', $str);
        $this->close_before = intval($arr[1])*60 + intval($arr[0])*3600;
      }
    }
    parent::preSave($event);
  }
  public function preInsert($event)
  {
    
    if ( sfContext::hasInstance()
      && sfContext::getInstance()->getConfiguration()->getApplication() == 'museum' )
      $this->museum = true;
    
    parent::preSave($event);
  }

  public function getDurationHR()
  {
    if ( intval($this->duration).'' != ''.$this->duration )
      return $this->duration;
    
    sfApplicationConfiguration::getActive()->loadHelpers(array('I18N'));
    $days = floor($this->duration/(3600*24));
    $hours = floor($this->duration%(3600*24)/3600);
    $minutes = str_pad(floor($this->duration%3600/60), 2, '0', STR_PAD_LEFT);
    return ($days > 0 ? __('%%d%% day(s)',array('%%d%%' => $days)) : '').' '.$hours.':'.$minutes;
  }
  public function getClose_BeforeHR()
  {
    if ( intval($this->close_before).'' != ''.$this->close_before )
      return $this->close_before;
    
    sfApplicationConfiguration::getActive()->loadHelpers(array('I18N'));
    $days = floor($this->close_before/(3600*24));
    $hours = floor($this->close_before%(3600*24)/3600);
    $minutes = str_pad(floor($this->close_before%3600/60), 2, '0', STR_PAD_LEFT);
    return ($days > 0 ? __('%%d%% day(s)',array('%%d%%' => $days)) : '').' '.$hours.':'.$minutes;
  }
  
  public function getMEid()
  {
    return $this->meta_event_id;
  }

  public function getIndexesPrefix()
  {
    return strtolower(get_class($this));
  }
  
  public function actAs($tpl, array $options = array())
  {
    $options['table'] = $this->getTable();
    return parent::actAs($tpl, $options);
  }
  public function setUp()
  {
    parent::setUp();
    
    // versions
    // adding a "lang" column to EventVersion to be able to record the changes in the i18n data
    $this->getTable()->getTemplate('Versionable')->getAuditLog()
      ->hasColumn('lang', 'string', 2, array('fixed' => true, 'primary' => true));
    
    // searchable
    $tpl = $this->getTable()->getTemplate('Searchable');
    $tpl->getListener()->set('Searchable', new Doctrine_Search_Listener_I18n($tpl->getPlugin()));
  }

  public function duplicate()
  { 
    $new = $this->copy();
    
    foreach ( array('Translation', 'Companies', 'Checkpoints', 'MemberCardPrices', 'MemberCardPriceModels') as $relation )
      foreach ( $this->$relation as $relobj )
        $new->{$relation}[] = $relobj->copy();
    foreach ( array('MetaEvent', 'EventCategory') as $relation )
      $new->$relation = $this->$relation;
    foreach($new->Checkpoints as $checkpoint)
      $checkpoint->slug = null;
    $new->slug = NULL;

    $new->save();

    return $new;
  }
  public function postInsert($event) 
  {
      $autocheckpoint = sfConfig::get('app_checkpoint_autocheckpoint', false);
      $name = sfConfig::get('app_checkpoint_name','Entrance');
                  
      if ($autocheckpoint) 
      {
        $cp = new Checkpoint;
        $cp->event_id = $this->id;
        $cp->name =$name;
        $cp->type ='entrance';
        $cp->save();
      }
      parent::postInsert($event);
  }
}
