<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $short_name
 * @property integer $meta_event_id
 * @property integer $event_category_id
 * @property string $event_category_description
 * @property string $staging
 * @property string $staging_label
 * @property string $writer
 * @property string $writer_label
 * @property integer $duration
 * @property decimal $age_min
 * @property decimal $age_max
 * @property string $description
 * @property string $extradesc
 * @property string $extraspec
 * @property decimal $web_price
 * @property decimal $web_price_group
 * @property string $image_url
 * @property EventCategory $EventCategory
 * @property MetaEvent $MetaEvent
 * @property Doctrine_Collection $Companies
 * @property Doctrine_Collection $EventCompanies
 * @property Doctrine_Collection $Manifestations
 * @property Doctrine_Collection $Checkpoints
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('short_name', 'string', 127, array(
             'type' => 'string',
             'length' => 127,
             ));
        $this->hasColumn('meta_event_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('event_category_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('event_category_description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('staging', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('staging_label', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('writer', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('writer_label', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('duration', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('age_min', 'decimal', 3, array(
             'type' => 'decimal',
             'scale' => 1,
             'length' => 3,
             ));
        $this->hasColumn('age_max', 'decimal', 3, array(
             'type' => 'decimal',
             'scale' => 1,
             'length' => 3,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('extradesc', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('extraspec', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('web_price', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 3,
             'length' => 8,
             ));
        $this->hasColumn('web_price_group', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 3,
             'length' => 8,
             ));
        $this->hasColumn('image_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('EventCategory', array(
             'local' => 'event_category_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('MetaEvent', array(
             'local' => 'meta_event_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Organism as Companies', array(
             'refClass' => 'EventCompany',
             'local' => 'event_id',
             'foreign' => 'organism_id'));

        $this->hasMany('EventCompany as EventCompanies', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Manifestation as Manifestations', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Checkpoint as Checkpoints', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             ));
        $searchable0 = new Doctrine_Template_Searchable(array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'writer',
              2 => 'staging',
              3 => 'short_name',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($searchable0);
    }
}