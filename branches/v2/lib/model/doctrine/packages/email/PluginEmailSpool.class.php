<?php
/**********************************************************************************
*
*	    This file is part of e-venement.
*
*    e-venement is free software; you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation; either version 2 of the License.
*
*    e-venement is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with e-venement; if not, write to the Free Software
*    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*
*    Copyright (c) 2006-2011 Baptiste SIMON <baptiste.simon AT e-glop.net>
*    Copyright (c) 2006-2011 Libre Informatique [http://www.libre-informatique.fr/]
*
***********************************************************************************/
?>
<?php

// THIS IS A MAJOR HACK FOR STORING SERIALIZED OBJECT IN A PGSQL DATABASE !!

/**
 * PluginEmailSpool
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    e-venement
 * @subpackage model
 * @author     Baptiste SIMON <baptiste.simon AT e-glop.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginEmailSpool extends BaseEmailSpool
{
  protected $db_driver = '';
  const null_byte = "~~NULL_BYTE~~";
  
  protected function getDBDriver()
  {
    if ( !$this->db_driver )
      $this->db_driver = Doctrine_Manager::connection()->getDriverName();
    return $this->db_driver;
  }
  protected function isPgsql()
  {
    return 'Pgsql' === $this->getDBDriver();
  }
  
  public function setMessage($message)
  {
    if ( $this->isPgsql() )
      $message = $this->pg_escape_serialized($message);
    
    return $this->_set('message',$message);
  }
  
  public function getMessage()
  {
    return $message = $this->isPgsql()
        ? $this->pg_unescape_serialized($this->_get('message'))
        : $this->_get('message');
  }
  
  static protected function pg_escape_serialized($str)
  {
    return str_replace("\0", self::null_byte, $str);
  }
  static protected function pg_unescape_serialized($str)
  {
    return str_replace(self::null_byte, "\0", $str);
  }
}
